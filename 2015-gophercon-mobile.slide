Go on Mobile

GopherCon

Hana Kim
Google

* golang.org/x/mobile

Goal: Bring Go to Mobile Platforms

Why?

- Write a single cross-platform Go library
- Use Go to program a complete system (server and client)
- Write more Go than C/C++ ❤

* Two ways of using Go

SDK Apps

- Write Android UI in Java
- Write iOS UI in Swift/Objective-C
- Write common functionality in Go as a library


Native Apps

- Write the whole app in Go
- Use packages for features available through NDK (touch/keyboard/sensor/...)
- Use packages for OpenGL, OpenAL, 2-D sprites.


* Before Go 1.4

Some users built their own Go binaries for Android with cgo + external linking through NDK tool chains

Apps with an out-of-process model
　Camlistore android app, ...

Apps with an in-process model
　Goandroid, Mandala, ...


* Go 1.4: Hello, Android!


Can build Android apps (`arm`)

Can build Dalvik/ART-loadable .so

Android builder
　
The `gobind` tool for Java and Go language binding

Packages for cross-device apps: basic app control, openGL ES 2, touch

.link https://golang.org/s/go14android
.link https://golang.org/s/gobind

* Go 1.5: Hello, iOS!

Experimental support for iOS (`arm`,`arm64`)

Major progress in shared library support

  -buildmode=c-shared   // generates .so file loadable by Dalvik/Art
  -buildmode=c-archive  // generates .a file compiled to C code

.link golang.org/x/buildmodes

`golang.org/x/mobile` repository:

- The `gomobile` tool for mobile app/library build

- More packages under experiment: audio, font, sensor, sprite, ...

- Extended `gobind` tool: Objective-C binding


* Pure-Go Apps (Native Apps)

* Challenge

Designing cross-platform APIs

- with good API coverage to be useful

- following idiomatic Go style


* Packages for cross-platform apps

Develop, test and run your application
on your desktop and then deploy it to mobile devices.

golang.org/x/mobile/...
- [[http://golang.org/x/mobile/app][app: App control]]
- [[http://golang.org/x/mobile/gl][gl: OpenGL ES 2]]
- [[https://golang.org/x/mobile/event][event: Events ]]
- [[https://golang.org/x/mobile/geom][geom: Screen geometry]]
- [[https://golang.org/x/mobile/exp/audio][audio: Audio]]
- [[https://golang.org/x/mobile/exp/font][font: System font]]
- [[https://golang.org/x/mobile/exp/sensor][sensor: Motion sensors]]
- [[https://golang.org/x/mobile/exp/sprite][sprite: 2-D rendering]]

* Life Cycle of a Native Apps

Android

- It begins in Android-specific code (ANativeActivity)
- The shared library is loaded.
- The Go runtime is initialized and the Go main is called
- app.Run starts UI/Event handling

iOS

- It begins from the Go main.
- app.Run starts UI/Event handling.

All packaged in [[http://golang.org/x/mobile/app]]


* Demo: Hello, Gopher!

.code 2015-gophercon-mobile/hello/main.go /START OMIT/,/END OMIT/

This program uses the listed packages; no Java or C in my code.

The app package includes Mac/X11 shims for starting as normal programs


* The `gomobile` tool

  $ go get golang.org/x/mobile/cmd/gomobile

Simplifies toolchain installation and app deployment

To install the Android/iOS compiler tool chain:

	$ gomobile init

To build an Android APK and install on a device:

	$ gomobile -target=android build

To build an iOS app (work in progress):

	$ gomobile -target=ios build

(Demo)

* Gobind Apps (SDK Apps)


* Challenges

.image 2015-gophercon-mobile/gobind.png 300 _

Manually mapping data structures and functions between languages

Integration with existing IDEs


* The `gobind` tool

	$ go get golang.org/x/mobile/cmd/gobind

Automates language binding through code generation

Defines the language binding from exported Go APIs; no explicit annotation

Currently supports a [[http://golang.org/x/mobile/cmd/gobind][subset of Go types]]

* Demo: `gobind`

The `gobind` tool outputs .go glue code and the proxy API in target language

- Generate the go glue code for mypkg:

	$ gobind -lang=go -outdir=go_mypkg mypkg

- Generate the corresponding types for Java:

	$ gobind -lang=java -outdir=java mypkg

- Or Objective-C:

	$ gobind -lang=objc -outdir=objc mypkg


* Calling Go from Java

.code 2015-gophercon-mobile/gobindex/MainActivity.java /START OMIT/,/END OMIT/

`go.Go.init` initializes the Go runtime

* How to build it?

.image 2015-gophercon-mobile/memegobind.jpg 480 _


* The `gomobile bind` command

Simplifies the build process. Internally,

- Generates .go glue code and the target language code using gobind

- Compiles the .go glue code to a shared library

- Compiles the generated Java code using the build tools in SDK

- Packages everything into a `.aar` file (modern way to distribute android library)

iOS support is a work in progress.


* Android Studio integration

Android Studio 1.2+ supports `.aar` import

.image 2015-gophercon-mobile/androidstudio2.png 250 _

Update
- Build script to invoke `gomobile bind`, or
- Gradle-plugin to invoke `gomobile bind` and publish the output

In the future, this can be integrated into Android Studio


* The Story of Ivy

[[robpike.io/ivy]]

Ivy is an interpreter for an APL-like language developed by Rob Pike.

[[http://go-talks.appspot.com/github.com/robpike/ivy/talks/ivy.slide#1][Rob Pike's talk]]

It's a useful desktop calculator that handles big int, rational numbers, vectors, matrices
It's fun to play with

Can I has Ivy on my mobile phone?

* Bring Ivy to Mobile

	func Run(expr string) (result string, err error) 

.image 2015-gophercon-mobile/ivyabout.png 300 _

(Demo)

Trivium: Rob named it after Kenneth Iverson, the APL inventor

* What's Next?

More APIs available to "pure-Go" apps

Testing, Profiling, Debugging

Improvement in GL, graphics packages

More platform API support

Richer type support in `gobind`

IDE integration..

* Contribution

// TODO: list of contributors
