Go on Mobile

GopherCon
July 9, 2015

Hana Kim
Google

* golang.org/x/mobile

Goal: Bring Go to Mobile Platforms.

Why?

- Write a single cross-platform Go library.
- Go is a complete system programming language.
- Write more Go than C/C++. ❤❤❤

* Two ways of using Go

SDK Apps

- Write Android UI in Java.
- Write iOS UI in Swift/Objective-C.
- Common functionalities in Go as a library.


NDK Apps

- Everything is written in Go. 
- Features available through NDK (touch/keyboard/sensor/...)
- OpenGL, OpenAL, 2D sprite packages.


* Before Go 1.4

Install and run a Go binary built with cgo + external linking

	adb push
	adb shell 

Apps with an out-of-process model.
　Camlistore android app, ...

Apps with an in-process model.
　Goandroid, Mandala, ...


* Go 1.4: Hello, Android!


Can build Android apps (arm).

Can build Dalvik/ART-loadable .so.

Android builder.
　
The `gobind` tool for Java and Go language binding.

Packages for cross-device apps: basic app control, openGL ES 2, touch.

.link https://golang.org/s/go14android
.link https://golang.osg/s/gobind

* Go 1.5: Hello, iOS!

Experimental support for iOS (arm,arm64).

Major progress in shared library support.
.link golang.org/x/buildmodes


Mobile subrepo:

- The `gomobile` tool for mobile app/library build.

- More packages under experiment: audio, font, sensor, sprite, ...

- Extended `gobind` tool: Objective-C binding.


* All Go Apps (NDK Apps)

* Challenges

Designing cross-platform APIs.

Coverage to ensure to be useful.

while following idiomatic Go style.


* Packages for cross-platform apps

Develop, test and run your application
on your desktop and then deploy it to mobile devices.

- [[https://godoc.org/golang.org/x/mobile/app][App control]]
- [[https://godoc.org/golang.org/x/mobile/gl][OpenGL ES 2]]
- [[https://godoc.org/golang.org/x/mobile/event][Touch events]]
- [[https://godoc.org/golang.org/x/mobile/geom][Screen geometry]]
- [[https://godoc.org/golang.org/x/mobile/exp/audio][Audio]]
- [[https://godoc.org/golang.org/x/mobile/exp/font][System font]]
- [[https://godoc.org/golang.org/x/mobile/exp/sensor][Motion sensor]]
- [[https://godoc.org/golang.org/x/mobile/exp/sprite][2D rendering]]

* Lifecycle in Native Apps

Begins in platform-specific code.

The Go runtime is initialized and the Go main is called.

All packaged in [[https://godoc.org/golang.org/x/mobile/app]].

// TODO: app API is in flux. Add code snippet once it gets quiet.

* Demo: Hello, Gopher!

.code 2015-gophercon-mobile/hello/main.go /START OMIT/,/END OMIT/

The app package includes Mac/X11 shims for starting as normal programs.


* The gomobile tool

.link godoc.org/golang.org/x/mobile/cmd/gomobile

Simplifies toolchain installation and app deployment.

To install the Android/iOS compiler tool chain:

	$ gomobile init

To build an Android APK and install on a device:

	$ gomobile -target=android build

To build an iOS app (work-in-progress):

	$ gomobile -target=ios build


* Demo: Hello, Gopher, again!

// install hello app on Android.
// TODO: screen shot and backup video


* Gobind Apps (SDK Apps)


* Challenges

.image 2015-gophercon-mobile/gobind.png 300 _

Manually mapping data structures and functions between languages.

Integration with existing IDEs.


* The gobind tool

Language binding through code generation.

Exported Go APIs define the language binding; no explicit annotation.

Currently supports a [[https://godoc.org/golang.org/x/mobile/cmd/gobind][subset of Go types]].

* The gobind tool 

The `gobind` tool outputs .go glue code and the proxy API in target language.

- Generate the go glue code for mypkg:

	$ gobind -lang=go -outdir=godir mypkg

- Generate the corresponding java types:

	$ gobind -lang=java -outdir=javadir mypkg

- Similarly, generate the objective-c types:

	$ gobind -lang=objc -outdir=objcdir mypkg


* Calling Go from Java

.code 2015-gophercon-mobile/gobindex/MainActivity.java /START OMIT/,/END OMIT/

`go.Go.init` initializes the Go runtime.

* How to build it?

.image 2015-gophercon-mobile/memegobind.jpg 480 _


* The `gomobile bind` command

Simplifies the build process. Internally,

- Generates .go glue code and the target language code using gobind.

- Compiles the .go glue code to a shared library.

- Compiles the generated Java code using the build tools in SDK.

- Packages everything into a `.aar` file (modern way to distribute android library).

iOS support, WIP.


* Android Studio integration

Android Studio 1.2+ supports .aar import.

.image 2015-gophercon-mobile/androidstudio2.png 250 _

Update
- Build script to invoke `gomobile bind`, or
- Gradle-plugin to invoke `gomobile bind` and publish the output.

In the future, this can be integrated into Android Studio.


* Story of Ivy

[[robpike.io/ivy]]

Ivy is an interpreter for an APL-like language.

It uses exact rational arithmetic; can handle arbitrary precision
but does not implement any irrational calculations.

Unlike APL, the input is ASCII and the results are exact. 

Trivium: Rob named it after Kenneth Iverson, the APL inventor.

* Bring Ivy to Mobile

.image 2015-gophercon-mobile/ivyabout.png 300 _

(Demo)

* What's Next?

More APIs available to All-Go apps.

Testing, Profiling, Debugging.

Improvement in GL, graphics packages.

More platform API support.

Richer type support in Gobind.

IDE integration..

* Contribution

// TODO: list of contributors, ...
